}
for (row_number in rownames(sample_table)) {
sample
s
)
for (row_number in rownames(sample_table)) {
print(row_number)
print(sample_table[row_number, 1])
}
sample_table[row_number, 1]
sample_table[row_number, 1]
sample_table[row_number]
row_number
sample_table
sample_table[1,3]
for (row_number in rownames(sample_table)) {
print(row_number)
print(sample_table[row_number, 3])
}
print(sample_table[row_number, 3])
sample_table[row_number, 3]
sample_table[1,3]
row_number
sample_table[row_number, 3]
sample_table[1,3]
sample_table[row_number,3]
print(sample_table[, .(R1)][row_number])
for (row_number in rownames(sample_table)) {
print(row_number)
print(sample_table[, .(R1)][row_number])
}
sample_table[, .(R1)][row_number]
sample_table[, .(R1)]
sample_table[, .(R1)][1]
sample_table[, .(R1)][row_number]
tototo <- 1
sample_table[, .(R1)][tototo]
tototo
row_number
row_number <- as.integer(row_number)
print(sample_table[, .(R1)][row_number])
for (row_number in rownames(sample_table)) {
print(row_number)
row_number <- as.integer(row_number)
print(sample_table[, .(R1)][row_number])
}
for (row_number in rownames(sample_table)) {
row_number <- as.integer(row_number)
print(sample_table[, .(R1)][row_number])
}
print(sample_table[row_number, 3])
for (row_number in rownames(sample_table)) {
row_number <- as.integer(row_number)
print(sample_table[row_number, 3])
}
sample_table_file <- args[1]
sample_table_file <- "../tables/sample_table.tsv"
crop_length <- ".:27,27:56"
trim_jar <- "/home/rad/packages/trimmomatic-0.38/trimmomatic-0.38.jar"
out_dir <- "test"
##########FUNCTIONS##########
build_crop <- function(cs){
cl = strsplit(cs,':')[[1]]
outl = c()
if(cl[1] != '.'){
outl[1] = paste0(' HEADCROP:',cl[1])
} else {outl[1]=''}
if(cl[2] != '.'){
outl[2] = paste0(' CROP:',cl[2])
} else {outl[2]=''}
return(paste0(outl, collapse= ' '))
}
################################
sample_table <- fread(sample_table_file)
#cropping taken from Olga Baranov's in house Mageck pipeline and slightly adapted
#cropin = strsplit(nargs['crop_len'],',')[[1]]
cropin = strsplit(crop_length,',')[[1]]
cropfwd = build_crop(cropin[1])
if(("R2" %in% colnames(sample_table)) & (length(cropin) == 2)){
if(cropin[2] == '.:.'){
croprev = ''
} else { croprev = build_crop(cropin[2]) }
} else {croprev = ''}
#for (row_number in rownames(sample_table)) {
#  row_number <- as.integer(row_number)
#  print(sample_table[row_number, 3])
#  fwd_cmd = paste0('java -jar ', nargs['trm_jar'] ,' SE ', sam_tab[row, 2],' ', nargs['out_dir'], '/', fwd.name, cropfwd)
#}
for(row in rownames(sample_table)){
row <- as.integer(row)
fwd_name = basename( sample_table[row, 2])
fwd_cmd = paste0('java -jar ', trim_jar ,' SE ', sample_table[row, 2],' ', out_dir, '/', fwd_name, cropfwd)
print(fwd_cmd)
#system(fwd_cmd)
if("R2" %in% colnames(sample_table)){
rev_name = basename( sample_table[row, 4])
if (croprev != ''){
rev.cmd = paste0('java -jar ', trim_jar ,' SE ', sample_table[row, 3],' ', out_dir, '/', rev_name, croprev)
} else { rev_cmd = paste0('scp ', sample_table[row, 3],' ', out_dir, '/', rev.name) }
print(rev_cmd)
#system(rev_cmd)
}
}
#for (row_number in rownames(sample_table)) {
#  row_number <- as.integer(row_number)
#  print(sample_table[row_number, 3])
#  fwd_cmd = paste0('java -jar ', nargs['trm_jar'] ,' SE ', sam_tab[row, 2],' ', nargs['out_dir'], '/', fwd.name, cropfwd)
#}
for(row in rownames(sample_table)){
row <- as.integer(row)
fwd_name = basename(sample_table[row, 2])
fwd_cmd = paste0('java -jar ', trim_jar ,' SE ', sample_table[row, 2],' ', out_dir, '/', fwd_name, cropfwd)
print(fwd_cmd)
#system(fwd_cmd)
if("R2" %in% colnames(sample_table)){
rev_name = basename( sample_table[row, 4])
if (croprev != ''){
rev.cmd = paste0('java -jar ', trim_jar ,' SE ', sample_table[row, 3],' ', out_dir, '/', rev_name, croprev)
} else { rev_cmd = paste0('scp ', sample_table[row, 3],' ', out_dir, '/', rev.name) }
print(rev_cmd)
#system(rev_cmd)
}
}
row <- 1
row <- as.integer(row)
fwd_name = basename(sample_table[row, 2])
sample_table
sample_table[1]
sample_table[1,2]
sample_table[1,3]
fwd_name = basename(sample_table[row, 3])
sample_table[row, 3]
################################
sample_table <- read_tsv(sample_table_file)
#cropping taken from Olga Baranov's in house Mageck pipeline and slightly adapted
#cropin = strsplit(nargs['crop_len'],',')[[1]]
cropin = strsplit(crop_length,',')[[1]]
cropfwd = build_crop(cropin[1])
if(("R2" %in% colnames(sample_table)) & (length(cropin) == 2)){
if(cropin[2] == '.:.'){
croprev = ''
} else { croprev = build_crop(cropin[2]) }
} else {croprev = ''}
#for (row_number in rownames(sample_table)) {
#  row_number <- as.integer(row_number)
#  print(sample_table[row_number, 3])
#  fwd_cmd = paste0('java -jar ', nargs['trm_jar'] ,' SE ', sam_tab[row, 2],' ', nargs['out_dir'], '/', fwd.name, cropfwd)
#}
for(row in rownames(sample_table)){
row <- as.integer(row)
fwd_name = basename(sample_table[row, 3])
fwd_cmd = paste0('java -jar ', trim_jar ,' SE ', sample_table[row, 2],' ', out_dir, '/', fwd_name, cropfwd)
print(fwd_cmd)
#system(fwd_cmd)
if("R2" %in% colnames(sample_table)){
rev_name = basename( sample_table[row, 4])
if (croprev != ''){
rev.cmd = paste0('java -jar ', trim_jar ,' SE ', sample_table[row, 3],' ', out_dir, '/', rev_name, croprev)
} else { rev_cmd = paste0('scp ', sample_table[row, 3],' ', out_dir, '/', rev.name) }
print(rev_cmd)
#system(rev_cmd)
}
}
row <- as.integer(row)
row
fwd_name = basename(sample_table[row, 3])
fwd_cmd = paste0('java -jar ', trim_jar ,' SE ', sample_table[row, 2],' ', out_dir, '/', fwd_name, cropfwd)
fwd_name = basename(sample_table[row, 3])
sample_table[1,3]
basename(sample_table[1,3])
fwd_name = basename(as.character(sample_table[row, 3]))
fwd_cmd = paste0('java -jar ', trim_jar ,' SE ', sample_table[row, 2],' ', out_dir, '/', fwd_name, cropfwd)
print(fwd_cmd)
#system(fwd_cmd)
if("R2" %in% colnames(sample_table)){
rev_name = basename( sample_table[row, 4])
if (croprev != ''){
rev.cmd = paste0('java -jar ', trim_jar ,' SE ', sample_table[row, 3],' ', out_dir, '/', rev_name, croprev)
} else { rev_cmd = paste0('scp ', sample_table[row, 3],' ', out_dir, '/', rev.name) }
print(rev_cmd)
#system(rev_cmd)
}
rev_name = basename(as.character(sample_table[row, 4]))
if (croprev != ''){
rev.cmd = paste0('java -jar ', trim_jar ,' SE ', sample_table[row, 3],' ', out_dir, '/', rev_name, croprev)
} else { rev_cmd = paste0('scp ', sample_table[row, 3],' ', out_dir, '/', rev.name) }
print(rev_cmd)
#system(fwd_cmd)
if("R2" %in% colnames(sample_table)){
rev_name = basename(as.character(sample_table[row, 4]))
if (croprev != ''){
rev.cmd = paste0('java -jar ', trim_jar ,' SE ', sample_table[row, 3],' ', out_dir, '/', rev_name, croprev)
} else { rev_cmd = paste0('scp ', sample_table[row, 3],' ', out_dir, '/', rev.name) }
print(rev_cmd)
#system(rev_cmd)
}
#system(fwd_cmd)
if("R2" %in% colnames(sample_table)){
rev_name = basename(as.character(sample_table[row, 4]))
if (croprev != ''){
rev.cmd = paste0('java -jar ', trim_jar ,' SE ', sample_table[row, 3],' ', out_dir, '/', rev_name, croprev)
} else { rev_cmd = paste0('scp ', sample_table[row, 3],' ', out_dir, '/', rev.name) }
print(rev_cmd)
#system(rev_cmd)
}
paste0('scp ', sample_table[row, 3],' ', out_dir, '/', rev.name) }
paste0('scp ', sample_table[row, 3],' ', out_dir, '/', rev.name)
if (croprev != ''){
rev.cmd = paste0('java -jar ', trim_jar ,' SE ', sample_table[row, 3],' ', out_dir, '/', rev_name, croprev)
} else { rev_cmd = paste0('scp ', sample_table[row, 3],' ', out_dir, '/', rev_name) }
#system(fwd_cmd)
if("R2" %in% colnames(sample_table)){
rev_name = basename(as.character(sample_table[row, 4]))
if (croprev != ''){
rev.cmd = paste0('java -jar ', trim_jar ,' SE ', sample_table[row, 3],' ', out_dir, '/', rev_name, croprev)
} else { rev_cmd = paste0('scp ', sample_table[row, 3],' ', out_dir, '/', rev_name) }
print(rev_cmd)
#system(rev_cmd)
}
#system(fwd_cmd)
if("R2" %in% colnames(sample_table)){
rev_name = basename(as.character(sample_table[row, 4]))
if (croprev != ''){
rev_cmd = paste0('java -jar ', trim_jar ,' SE ', sample_table[row, 3],' ', out_dir, '/', rev_name, croprev)
} else { rev_cmd = paste0('scp ', sample_table[row, 3],' ', out_dir, '/', rev_name) }
print(rev_cmd)
#system(rev_cmd)
}
trim_dir <- paste0(out_dir, "/trimmed")
library(tidyverse)
library(vroom)
sample_table_file <- "../tables/sample_table.tsv"
##########FUNCTIONS##########
#map functions?
################################
sample_table <- read_tsv(sample_table_file)
library(tidyverse)
##########FUNCTIONS##########
#map functions?
################################
sample_table <- read_tsv(sample_table_file)
View(sample_table)
for(row in rownames(sample_table)){
row <- as.integer(row)
print(row)
#fwd_name = basename(as.character(sample_table[row, 3]))
#trimmed_fwd_name <- paste0(sub('\\.fastq.gz$', '', fwd_name), ".trimmed.fastq.gz")
#fwd_cmd = paste0('java -jar ', trim_jar ,' SE ', sample_table[row, 3],' ', trim_dir, '/', trimmed_fwd_name, cropfwd)
#print(fwd_cmd)
#system(fwd_cmd)
if("R2" %in% colnames(sample_table)){
rev_name = basename(as.character(sample_table[row, 4]))
#trimmed_rev_name <- paste0(sub('\\.fastq.gz$', '', rev_name), ".trimmed.fastq.gz")
#if (croprev != ''){
#  rev_cmd = paste0('java -jar ', trim_jar ,' SE ', sample_table[row, 4],' ', trim_dir, '/', trimmed_rev_name, croprev)
#} else { rev_cmd = paste0('scp ', sample_table[row, 3],' ', trim_dir, '/', trimmed_rev_name) }
#print(rev_cmd)
#system(rev_cmd)
}
}
for(row in rownames(sample_table)){
row <- as.integer(row)
print(row)
fwd_name = basename(as.character(sample_table[row, 3]))
#trimmed_fwd_name <- paste0(sub('\\.fastq.gz$', '', fwd_name), ".trimmed.fastq.gz")
#fwd_cmd = paste0('java -jar ', trim_jar ,' SE ', sample_table[row, 3],' ', trim_dir, '/', trimmed_fwd_name, cropfwd)
#print(fwd_cmd)
#system(fwd_cmd)
if("R2" %in% colnames(sample_table)){
rev_name = basename(as.character(sample_table[row, 4]))
#trimmed_rev_name <- paste0(sub('\\.fastq.gz$', '', rev_name), ".trimmed.fastq.gz")
#if (croprev != ''){
#  rev_cmd = paste0('java -jar ', trim_jar ,' SE ', sample_table[row, 4],' ', trim_dir, '/', trimmed_rev_name, croprev)
#} else { rev_cmd = paste0('scp ', sample_table[row, 3],' ', trim_dir, '/', trimmed_rev_name) }
#print(rev_cmd)
#system(rev_cmd)
}
}
fwd_name
reverse_complement_1 <- T
reverse_complement_2 <- F
read_1_pos <- "second"
read_2_pos <- "first"
##########FUNCTIONS##########
#map functions?
get_index_from_pos <- function(position){
if (position == "first") {
index <- "/media/rad/HDD2/Riccardo/cas13_count_pipeline/indexes/lib_spacer_1/lib_pos1"
} else if (position == "second") {
index <- "/media/rad/HDD2/Riccardo/cas13_count_pipeline/indexes/lib_spacer_2/lib_pos2"
} else {
print("position not recognised, allowed positions are 'first' and 'second'")
exit()
}
return(index)
}
get_index_from_pos("fisrt")
get_index_from_pos("first")
get_index_from_pos("second")
##########FUNCTIONS##########
#map functions?
get_index_from_pos <- function(position){
if (position == "first") {
index <- "/media/rad/HDD2/Riccardo/cas13_count_pipeline/indexes/lib_spacer_1/lib_pos1"
} else if (position == "second") {
index <- "/media/rad/HDD2/Riccardo/cas13_count_pipeline/indexes/lib_spacer_2/lib_pos2"
} else {
print("position not recognised, allowed positions are 'first' and 'second'")
stop()
}
return(index)
}
get_index_from_pos("second")
get_index_from_pos("first")
get_index_from_pos("se")
index <- get_index_from_pos(read_1_pos)
index_path <- get_index_from_pos(read_1_pos)
select_samtools_strand <- function(reverse_complement){
if (reverse_complement == T) {
view_strand <- "-f 16"
} else if (reverse_complement == F) {
view_strand <- "-F 16"
} else {
print("ERROR: reverse complement information not recognised, allowed options are 'T', 'TRUE', 'F', 'FALSE'")
stop()
}
}
select_samtools_strand(T)
select_samtools_strand <- function(reverse_complement){
if (reverse_complement == T) {
view_strand <- "-f 16"
} else if (reverse_complement == F) {
view_strand <- "-F 16"
} else {
print("ERROR: reverse complement information not recognised, allowed options are 'T', 'TRUE', 'F', 'FALSE'")
stop()
}
return(view_strand)
}
select_samtools_strand(T)
select_samtools_strand(F)
select_samtools_strand(a)
select_samtools_strand("F")
select_samtools_strand <- function(reverse_complement){
if (reverse_complement == "T") {
view_strand <- "-f 16"
} else if (reverse_complement == "F") {
view_strand <- "-F 16"
} else {
print("ERROR: reverse complement information not recognised, allowed options are 'T', 'TRUE', 'F', 'FALSE'")
stop()
}
return(view_strand)
}
select_samtools_strand("F")
select_samtools_strand("T")
select_samtools_strand("a")
fwd_name = basename(as.character(sample_table[row, 3]))
index_path <- get_index_from_pos(read_1_pos)
trimmed_fwd_name <- paste0(sub('\\.fastq.gz$', '', fwd_name), ".trimmed.fastq.gz")
trimmed_fwd_name <- paste0(sub('\\.fastq.gz$', '', fwd_name), ".trimmed.fastq.gz")
samtools_strand_opt <- select_samtools_strand(reverse_complement_1)
trimmed_fwd_name <- paste0(sub('\\.fastq.gz$', '', fwd_name), ".trimmed.fastq.gz")
samtools_strand_opt <- select_samtools_strand(reverse_complement_1)
reverse_complement_1 <- "T"
reverse_complement_2 <- "F"
samtools_strand_opt <- select_samtools_strand(reverse_complement_1)
trimmed_dir <- "test/trimmed"
trimmed_fwd_full_name <- paste0(trimmed_dir, "/", trimmed_fwd_name)
if (file.exists(trimmed_fwd_name)) {
print("exists")
}
if (file.exists(trimmed_fwd_full_name)) {
print("exists")
}
trimmed_dir <- "/media/rad/HDD2/Riccardo/cas13_count_pipeline/test/trimmed"
trimmed_fwd_full_name <- paste0(trimmed_dir, "/", trimmed_fwd_name)
if (file.exists(trimmed_fwd_full_name)) {
print("exists")
}
trimmed_fwd_full_name
file.exists(trimmed_fwd_full_name)
file.exists(trimmed_fwd_full_name)
trimmed_dir <- "../test/trimmed"
trimmed_fwd_full_name <- paste0(trimmed_dir, "/", trimmed_fwd_name)
if (file.exists(trimmed_fwd_full_name)) {
print("exists")
}
fwd_index_path <- get_index_from_pos(read_1_pos)
fwd_samtools_strand_opt <- select_samtools_strand(reverse_complement_1)
output_file <- paste0(output_dir, sub('\\.trimmed.fastq.gz$', '', fwd_name), ".sam")
output_dir <- "../test/mapped"
output_file <- paste0(output_dir, sub('\\.trimmed.fastq.gz$', '', fwd_name), ".sam")
output_file <- paste0(output_dir, "/", sub('\\.trimmed.fastq.gz$', '', fwd_name), ".sam")
dir.create(output_dir)
map_fwd_cmd <- paste0('bowtie -S -v ', mismatches, " --all ", fwd_index_path , trimmed_fwd_full_name, " | samtools view -F 4 -h | samtools view ", fwd_samtools_strand_opt, " > ", output_file)
mismatches <- 2
map_fwd_cmd <- paste0('bowtie -S -v ', mismatches, " --all ", fwd_index_path , trimmed_fwd_full_name, " | samtools view -F 4 -h | samtools view ", fwd_samtools_strand_opt, " > ", output_file)
map_fwd_cmd
map_fwd_cmd <- paste('bowtie -S -v', mismatches, "--all", fwd_index_path, trimmed_fwd_full_name, "| samtools view -F 4 -h | samtools view", fwd_samtools_strand_opt, ">", output_file, sep = " ")
map_fwd_cmd
library(data.table)
library(tidyverse)
# library(foreach)
# library(doParallel)
######PARALLELIZATION ARGUMENTS########
#information and part of the code taken from https://www.blasbenito.com/post/02_parallelizing_loops_with_r/
#
# #get number of cores
# n_cores <- floor(parallel::detectCores()/2)
# #create the cluster
# my_cluster <- parallel::makeCluster(
#    n_cores,
#    #use PSOCK because of portability on windows
#    type = "PSOCK"
# )
# clusterEvalQ(my_cluster, library(data.table, tidyverse))
# #register it to be used by %dopar%
# doParallel::registerDoParallel(cl = my_cluster)
#create %notchin%
`%notchin%` <- Negate(`%chin%`)
#args section
args = commandArgs(trailingOnly=T)
# sample_table_file <- args[1]
# combinations_table_file <- args[2]
# out_dir <- args[3]
sample_table_file <- "../tables/sample_table_montero_test.tsv"
combinations_table_file <- "../tables/combinations_table.tsv"
out_dir <- "../montero_test_trimmed_lib_all_align"
counts_dir <- paste0(out_dir, "/counts")
mapped_dir <- paste0(out_dir, "/mapped")
dir.create(counts_dir)
sample_table <- fread(sample_table_file)
combinations_table <- fread(combinations_table_file)
combinations_table_char <- combinations_table[, c(combinations)]
column_names_R1 <- c("query", "flag", "reference_R1", "pos", "mapq", "cigar", "r_next", "p_next", "tlen", "seq", "qual", "na1", "na2", "na3", "na4")
column_names_R2 <- c("query", "flag", "reference_R2", "pos", "mapq", "cigar", "r_next", "p_next", "tlen", "seq", "qual", "na1", "na2", "na3", "na4")
# rows <- rownames(sample_table)
# foreach(i=1:length(rows)) %dopar% {
#row <- as.integer(row)
# row <- rows[i]
# print(row)
fwd_name <- "KP4-lncRNA-R1_S6_R1_001_dup.fastq.gz"
rev_name <- "KP4-lncRNA-R1_S6_R2_001_complementary.fastq.gz"
mapped_fwd_name <- paste0(sub('\\.fastq.gz$', '', fwd_name), ".sam")
mapped_fwd_full_name <- paste0(mapped_dir, "/", mapped_fwd_name)
mappings_R1 <- fread(mapped_fwd_full_name, col.names = column_names_R1)
mapped_rev_name <- paste0(sub('\\.fastq.gz$', '', rev_name), ".sam")
mapped_rev_full_name <- paste0(mapped_dir, "/", mapped_rev_name)
mappings_R2 <- fread(mapped_rev_full_name, col.names = column_names_R2)
#print("mistaKE")
mappings <- merge(mappings_R1, mappings_R2, all = TRUE, by = "query")
View(mappings)
mappings[, combinations := paste(reference_R1, reference_R2, sep = "~")]
View(mappings)
length_mapped_all <- nrow(mappings)
off_map <- mappings[combinations %notchin% combinations_table_char]
View(off_map)
test <- copy(mappings)
test[, copies := .N, by = query]
View(test)
View(test)
test <- copy(mappings)
test <- test[combinations %chin% combinations_table_char]
View(test)
test[, copies := .N, by = query]
View(test)
test <- copy(mappings)
test[, copies := .N, by = query]
test <- test[combinations %chin% combinations_table_char]
View(test)
test <- copy(mappings)
test[, copies := .N, by = query]
View(test)
# rows <- rownames(sample_table)
# foreach(i=1:length(rows)) %dopar% {
#row <- as.integer(row)
# row <- rows[i]
# print(row)
fwd_name <- "KP4-lncRNA-R1_S6_R1_001_dup_comp.fastq.gz"
rev_name <- "KP4-lncRNA-R1_S6_R2_001_dup_comp.fastq.gz"
mapped_fwd_name <- paste0(sub('\\.fastq.gz$', '', fwd_name), ".sam")
mapped_fwd_full_name <- paste0(mapped_dir, "/", mapped_fwd_name)
mappings_R1 <- fread(mapped_fwd_full_name, col.names = column_names_R1)
mapped_rev_full_name <- paste0(mapped_dir, "/", mapped_rev_name)
mappings_R2 <- fread(mapped_rev_full_name, col.names = column_names_R2)
##log generation
log_rev_name <- paste0(mapped_dir, "/", sub('\\.fastq.gz$', '', rev_name), ".log")
mapped_rev_name <- paste0(sub('\\.fastq.gz$', '', rev_name), ".sam")
mapped_rev_full_name <- paste0(mapped_dir, "/", mapped_rev_name)
mappings_R2 <- fread(mapped_rev_full_name, col.names = column_names_R2)
#print("mistaKE")
mappings <- merge(mappings_R1, mappings_R2, all = TRUE, by = "query")
test <- copy(mappings)
mappings[, combinations := paste(reference_R1, reference_R2, sep = "~")]
length_mapped_all <- nrow(mappings)
test <- copy(mappings)
test <- test[combinations %chin% combinations_table_char]
View(test)
test[, copies := .N, by = query]
View(test)
test[copies == 1]
test <- test[copies == 1]
test <- copy(mappings)
test <- test[combinations %chin% combinations_table_char]
test[, copies := .N, by = query]
test <- test[copies == 1]
View(test)
test <- test[, -c("copies")]
View(test)
#mappings <- mappings[combinations %chin% combinations_table_char]
length_mapped_correct_comb <- nrow(mappings)
